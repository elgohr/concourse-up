// Code generated by counterfeiter. DO NOT EDIT.
package iaasfakes

import (
	"sync"

	"git.openstack.org/openstack/golang-client/openstack"
	"github.com/EngineerBetter/concourse-up/iaas"
)

type FakeOpenStack struct {
	DoAuthRequestStub        func(authopts openstack.AuthOpts) (openstack.AuthRef, error)
	doAuthRequestMutex       sync.RWMutex
	doAuthRequestArgsForCall []struct {
		authopts openstack.AuthOpts
	}
	doAuthRequestReturns struct {
		result1 openstack.AuthRef
		result2 error
	}
	doAuthRequestReturnsOnCall map[int]struct {
		result1 openstack.AuthRef
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOpenStack) DoAuthRequest(authopts openstack.AuthOpts) (openstack.AuthRef, error) {
	fake.doAuthRequestMutex.Lock()
	ret, specificReturn := fake.doAuthRequestReturnsOnCall[len(fake.doAuthRequestArgsForCall)]
	fake.doAuthRequestArgsForCall = append(fake.doAuthRequestArgsForCall, struct {
		authopts openstack.AuthOpts
	}{authopts})
	fake.recordInvocation("DoAuthRequest", []interface{}{authopts})
	fake.doAuthRequestMutex.Unlock()
	if fake.DoAuthRequestStub != nil {
		return fake.DoAuthRequestStub(authopts)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.doAuthRequestReturns.result1, fake.doAuthRequestReturns.result2
}

func (fake *FakeOpenStack) DoAuthRequestCallCount() int {
	fake.doAuthRequestMutex.RLock()
	defer fake.doAuthRequestMutex.RUnlock()
	return len(fake.doAuthRequestArgsForCall)
}

func (fake *FakeOpenStack) DoAuthRequestArgsForCall(i int) openstack.AuthOpts {
	fake.doAuthRequestMutex.RLock()
	defer fake.doAuthRequestMutex.RUnlock()
	return fake.doAuthRequestArgsForCall[i].authopts
}

func (fake *FakeOpenStack) DoAuthRequestReturns(result1 openstack.AuthRef, result2 error) {
	fake.DoAuthRequestStub = nil
	fake.doAuthRequestReturns = struct {
		result1 openstack.AuthRef
		result2 error
	}{result1, result2}
}

func (fake *FakeOpenStack) DoAuthRequestReturnsOnCall(i int, result1 openstack.AuthRef, result2 error) {
	fake.DoAuthRequestStub = nil
	if fake.doAuthRequestReturnsOnCall == nil {
		fake.doAuthRequestReturnsOnCall = make(map[int]struct {
			result1 openstack.AuthRef
			result2 error
		})
	}
	fake.doAuthRequestReturnsOnCall[i] = struct {
		result1 openstack.AuthRef
		result2 error
	}{result1, result2}
}

func (fake *FakeOpenStack) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doAuthRequestMutex.RLock()
	defer fake.doAuthRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOpenStack) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iaas.OpenStack = new(FakeOpenStack)
